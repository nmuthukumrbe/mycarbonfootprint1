<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <!-- not strictly necessary for this example, but still useful, see http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/mvc.html#mvc-ann-controller for more information -->
 	<context:component-scan base-package="com.fixxar.appyTailor" />
 	
 	<mvc:resources mapping="/resources/**" location="/resources/" />
 	
	<mvc:annotation-driven />
		
	<!-- This bean sets up the Velocity environment for us based on a root path 
		for templates. Optionally, a properties file can be specified for more control 
		over the Velocity environment, but the defaults are pretty sane for file 
		based template loading. -->
 	<bean id="velocityConfig" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
		<property name="resourceLoaderPath" value="/WEB-INF/views/" />
	</bean>
	

	<!-- <bean id="velocityConfig" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
	  <property name="velocityProperties">
	    <props>
	      <prop key="resource.loader">file</prop>
	      <prop key="file.resource.loader.class">
	        org.apache.velocity.runtime.resource.loader.FileResourceLoader
	      </prop>
	      <prop key="file.resource.loader.path">G:\Project\repository\fixa\code\trunk\fix-a-doctor\src\main\webapp\WEB-INF\mydoctor\views</prop>${webapp.root}/WEB-INF/velocity
	      <prop key="file.resource.loader.cache">false</prop>
	    </props>
	  </property>
	</bean>
	 -->
	<!-- View resolvers can also be configured with ResourceBundles or XML files. 
		If you need different view resolving based on Locale, you have to use the 
		resource bundle resolver. -->
 	<bean id="viewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
		<property name="cache" value="true" />
		<property name="prefix" value="" />
		<property name="suffix" value=".html" />
		<property name="contentType" value="text/html; charset=UTF-8" />
		<!-- if you want to use the Spring Velocity macros, set this property to true -->
		<property name="exposeSpringMacroHelpers" value="true" />
	</bean>
 	
		<!-- Configure to plugin JSON as request and response in method handler -->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="jsonMessageConverter"/>
			</list>
		</property>
	</bean>
	
	<!-- Configure bean to convert JSON to POJO and vice versa -->
	<bean id="jsonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
	</bean>
	
	<!-- <bean id="executeTimeInterceptor" class="com.fixxar.zoner.web.interceptor" /> -->
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- max upload size in bytes -->
        <property name="maxUploadSize" value="20971520" /> <!-- 20MB -->
        <!-- max size of file in memory (in bytes) -->
        <property name="maxInMemorySize" value="5242880" /> <!-- 5MB -->
    </bean>
    	
    <bean id="stringConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
  		<property name="supportedMediaTypes" value="text/plain;charset=UTF-8"/>
	</bean>
	
	<bean id="executeTimeInterceptor" class="com.fixxar.appyTailor.web.interceptor.ExecuteTimeInterceptor" />
	
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
				<ref bean="executeTimeInterceptor" />
		</mvc:interceptor>	
	</mvc:interceptors>

  	<!-- Create DataSource Bean -->
	 
	<bean id="dbDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
    	<property name="jndiName" value="java:comp/env/jdbc/appyTail"/>
    </bean>
   	
</beans>
